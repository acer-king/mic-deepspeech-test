{"version":3,"sources":["App.js","index.js"],"names":["App","props","startRecording","e","state","recording","recordingInterval","setInterval","recordingTime","Date","getTime","recordingStart","setState","startMicrophone","stopRecording","connected","socket","emit","clearInterval","stopMicrophone","recognitionOutput","recognitionCount","this","io","reconnectionDelayMax","on","console","log","results","id","unshift","className","disabled","onClick","renderTime","renderRecognitionOutput","Math","round","toFixed","map","r","key","text","audioContext","audioSource","processor","createScriptProcessor","sampleRate","context","downsampler","Worker","postMessage","command","inputSampleRate","onmessage","data","buffer","onaudioprocess","event","inputBuffer","getChannelData","inputFrame","shutdown","disconnect","connect","destination","AudioContext","success","stream","mediaStream","mediaStreamSource","createMediaStreamSource","createAudioProcessor","fail","error","navigator","mediaDevices","getUserMedia","video","audio","then","catch","getTracks","stop","close","Component","ReactDOM","render","document","getElementById"],"mappings":"4TAsLeA,E,kDAhLd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAgGPC,eAAiB,SAAAC,GACX,EAAKC,MAAMC,YACf,EAAKC,kBAAoBC,aAAY,WACpC,IAAIC,GAAgB,IAAIC,MAAOC,UAAY,EAAKN,MAAMO,eACtD,EAAKC,SAAS,CAAEJ,oBACd,KAEH,EAAKI,SAAS,CACbP,WAAW,EACXM,gBAAgB,IAAIF,MAAOC,UAC3BF,cAAe,IACb,WACF,EAAKK,uBA7GW,EAkJnBC,cAAgB,SAAAX,GACX,EAAKC,MAAMC,YACV,EAAKD,MAAMW,WACd,EAAKC,OAAOC,KAAK,gBAElBC,cAAc,EAAKZ,mBACnB,EAAKM,SAAS,CACbP,WAAW,IACT,WACF,EAAKc,sBAzJP,EAAKf,MAAQ,CACZW,WAAW,EACXV,WAAW,EACXM,eAAgB,EAChBH,cAAe,EACfY,kBAAmB,IAPF,E,qDAWnB,WAAqB,IAAD,OACfC,EAAmB,EACvBC,KAAKN,OAAS,IAAIO,IAAG,kCAAmC,CACvDC,qBAAsB,MAIvBF,KAAKN,OAAOS,GAAG,WAAW,WACzBC,QAAQC,IAAI,oBACZ,EAAKf,SAAS,CAAEG,WAAW,OAG5BO,KAAKN,OAAOS,GAAG,cAAc,WAC5BC,QAAQC,IAAI,uBACZ,EAAKf,SAAS,CAAEG,WAAW,IAC3B,EAAKD,mBAGNQ,KAAKN,OAAOS,GAAG,aAAa,SAACG,GAC5BF,QAAQC,IAAI,cAAeC,GADa,IAEhCR,EAAsB,EAAKhB,MAA3BgB,kBACRQ,EAAQC,GAAKR,IACbD,EAAkBU,QAAQF,GAC1B,EAAKhB,SAAS,CAAEQ,2B,oBAIlB,WACC,OAAQ,yBAAKW,UAAU,OACtB,6BACC,4BAAQC,UAAWV,KAAKlB,MAAMW,WAAaO,KAAKlB,MAAMC,UAAW4B,QAASX,KAAKpB,gBAA/E,mBAIA,4BAAQ8B,UAAWV,KAAKlB,MAAMC,UAAW4B,QAASX,KAAKR,eAAvD,kBAICQ,KAAKY,cAENZ,KAAKa,6B,wBAIR,WACC,OAAQ,+BACLC,KAAKC,MAAMf,KAAKlB,MAAMI,cAAgB,KAAO,IAAI8B,QAAQ,GADpD,O,qCAKT,WACC,OAAQ,4BACNhB,KAAKlB,MAAMgB,kBAAkBmB,KAAI,SAACC,GAClC,OAAQ,wBAAIC,IAAKD,EAAEX,IAAKW,EAAEE,Y,kCAK7B,SAAqBC,EAAcC,GAAc,IAAD,OAC3CC,EAAYF,EAAaG,sBAAsB,KAAM,EAAG,GAEtDC,EAAaH,EAAYI,QAAQD,WAEnCE,EAAc,IAAIC,OA7EI,4BAiG1B,OAnBAD,EAAYE,YAAY,CAAEC,QAAS,OAAQC,gBAAiBN,IAC5DE,EAAYK,UAAY,SAACnD,GACpB,EAAKC,MAAMW,WACd,EAAKC,OAAOC,KAAK,cAAed,EAAEoD,KAAKC,SAIzCX,EAAUY,eAAiB,SAACC,GAC3B,IAAIH,EAAOG,EAAMC,YAAYC,eAAe,GAC5CX,EAAYE,YAAY,CAAEC,QAAS,UAAWS,WAAYN,KAG3DV,EAAUiB,SAAW,WACpBjB,EAAUkB,aACV,EAAKN,eAAiB,MAGvBZ,EAAUmB,QAAQrB,EAAasB,aAExBpB,I,6BAoBR,WAAmB,IAAD,OACjBvB,KAAKqB,aAAe,IAAIuB,aAExB,IAAMC,EAAU,SAACC,GAChB1C,QAAQC,IAAI,qBACZ,EAAK0C,YAAcD,EACnB,EAAKE,kBAAoB,EAAK3B,aAAa4B,wBAAwBH,GACnE,EAAKvB,UAAY,EAAK2B,qBAAqB,EAAK7B,aAAc,EAAK2B,mBACnE,EAAKA,kBAAkBN,QAAQ,EAAKnB,YAG/B4B,EAAO,SAACtE,GACbuB,QAAQgD,MAAM,oBAAqBvE,IAGhCwE,UAAUC,cAAgBD,UAAUC,aAAaC,aACpDF,UAAUC,aAAaC,aAAa,CACnCC,OAAO,EACPC,OAAO,IAENC,KAAKb,GACLc,MAAMR,GAGRE,UAAUE,aAAa,CACtBC,OAAO,EACPC,OAAO,GACLZ,EAASM,K,4BAmBd,WACKnD,KAAK+C,aACR/C,KAAK+C,YAAYa,YAAY,GAAGC,OAE7B7D,KAAKgD,mBACRhD,KAAKgD,kBAAkBP,aAEpBzC,KAAKuB,WACRvB,KAAKuB,UAAUiB,WAEZxC,KAAKqB,cACRrB,KAAKqB,aAAayC,Y,GA5KHC,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.30a1d81d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst DOWNSAMPLING_WORKER = './downsampling_worker.js';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tconnected: false,\r\n\t\t\trecording: false,\r\n\t\t\trecordingStart: 0,\r\n\t\t\trecordingTime: 0,\r\n\t\t\trecognitionOutput: []\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet recognitionCount = 0;\r\n\t\tthis.socket = new io('wss://www.deeplanguagesync.com/', {\r\n\t\t\treconnectionDelayMax: 10000\r\n\t\t})\r\n\r\n\r\n\t\tthis.socket.on('connect', () => {\r\n\t\t\tconsole.log('socket connected');\r\n\t\t\tthis.setState({ connected: true });\r\n\t\t});\r\n\r\n\t\tthis.socket.on('disconnect', () => {\r\n\t\t\tconsole.log('socket disconnected');\r\n\t\t\tthis.setState({ connected: false });\r\n\t\t\tthis.stopRecording();\r\n\t\t});\r\n\r\n\t\tthis.socket.on('recognize', (results) => {\r\n\t\t\tconsole.log('recognized:', results);\r\n\t\t\tconst { recognitionOutput } = this.state;\r\n\t\t\tresults.id = recognitionCount++;\r\n\t\t\trecognitionOutput.unshift(results);\r\n\t\t\tthis.setState({ recognitionOutput });\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<div className=\"App\">\r\n\t\t\t<div>\r\n\t\t\t\t<button disabled={!this.state.connected || this.state.recording} onClick={this.startRecording}>\r\n\t\t\t\t\tStart Recording\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<button disabled={!this.state.recording} onClick={this.stopRecording}>\r\n\t\t\t\t\tStop Recording\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t{this.renderTime()}\r\n\t\t\t</div>\r\n\t\t\t{this.renderRecognitionOutput()}\r\n\t\t</div>);\r\n\t}\r\n\r\n\trenderTime() {\r\n\t\treturn (<span>\r\n\t\t\t{(Math.round(this.state.recordingTime / 100) / 10).toFixed(1)}s\r\n\t\t</span>);\r\n\t}\r\n\r\n\trenderRecognitionOutput() {\r\n\t\treturn (<ul>\r\n\t\t\t{this.state.recognitionOutput.map((r) => {\r\n\t\t\t\treturn (<li key={r.id}>{r.text}</li>);\r\n\t\t\t})}\r\n\t\t</ul>)\r\n\t}\r\n\r\n\tcreateAudioProcessor(audioContext, audioSource) {\r\n\t\tlet processor = audioContext.createScriptProcessor(4096, 1, 1);\r\n\r\n\t\tconst sampleRate = audioSource.context.sampleRate;\r\n\r\n\t\tlet downsampler = new Worker(DOWNSAMPLING_WORKER);\r\n\t\tdownsampler.postMessage({ command: \"init\", inputSampleRate: sampleRate });\r\n\t\tdownsampler.onmessage = (e) => {\r\n\t\t\tif (this.state.connected) {\r\n\t\t\t\tthis.socket.emit('stream-data', e.data.buffer);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tprocessor.onaudioprocess = (event) => {\r\n\t\t\tvar data = event.inputBuffer.getChannelData(0);\r\n\t\t\tdownsampler.postMessage({ command: \"process\", inputFrame: data });\r\n\t\t};\r\n\r\n\t\tprocessor.shutdown = () => {\r\n\t\t\tprocessor.disconnect();\r\n\t\t\tthis.onaudioprocess = null;\r\n\t\t};\r\n\r\n\t\tprocessor.connect(audioContext.destination);\r\n\r\n\t\treturn processor;\r\n\t}\r\n\r\n\tstartRecording = e => {\r\n\t\tif (!this.state.recording) {\r\n\t\t\tthis.recordingInterval = setInterval(() => {\r\n\t\t\t\tlet recordingTime = new Date().getTime() - this.state.recordingStart;\r\n\t\t\t\tthis.setState({ recordingTime });\r\n\t\t\t}, 100);\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\trecording: true,\r\n\t\t\t\trecordingStart: new Date().getTime(),\r\n\t\t\t\trecordingTime: 0\r\n\t\t\t}, () => {\r\n\t\t\t\tthis.startMicrophone();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tstartMicrophone() {\r\n\t\tthis.audioContext = new AudioContext();\r\n\r\n\t\tconst success = (stream) => {\r\n\t\t\tconsole.log('started recording');\r\n\t\t\tthis.mediaStream = stream;\r\n\t\t\tthis.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);\r\n\t\t\tthis.processor = this.createAudioProcessor(this.audioContext, this.mediaStreamSource);\r\n\t\t\tthis.mediaStreamSource.connect(this.processor);\r\n\t\t};\r\n\r\n\t\tconst fail = (e) => {\r\n\t\t\tconsole.error('recording failure', e);\r\n\t\t};\r\n\r\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\t\t\tnavigator.mediaDevices.getUserMedia({\r\n\t\t\t\tvideo: false,\r\n\t\t\t\taudio: true\r\n\t\t\t})\r\n\t\t\t\t.then(success)\r\n\t\t\t\t.catch(fail);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnavigator.getUserMedia({\r\n\t\t\t\tvideo: false,\r\n\t\t\t\taudio: true\r\n\t\t\t}, success, fail);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tstopRecording = e => {\r\n\t\tif (this.state.recording) {\r\n\t\t\tif (this.state.connected) {\r\n\t\t\t\tthis.socket.emit('stream-reset');\r\n\t\t\t}\r\n\t\t\tclearInterval(this.recordingInterval);\r\n\t\t\tthis.setState({\r\n\t\t\t\trecording: false\r\n\t\t\t}, () => {\r\n\t\t\t\tthis.stopMicrophone();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tstopMicrophone() {\r\n\t\tif (this.mediaStream) {\r\n\t\t\tthis.mediaStream.getTracks()[0].stop();\r\n\t\t}\r\n\t\tif (this.mediaStreamSource) {\r\n\t\t\tthis.mediaStreamSource.disconnect();\r\n\t\t}\r\n\t\tif (this.processor) {\r\n\t\t\tthis.processor.shutdown();\r\n\t\t}\r\n\t\tif (this.audioContext) {\r\n\t\t\tthis.audioContext.close();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}